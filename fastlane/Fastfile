# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

before_all do |lane, options|
  ENV["GIT_BRANCH"] = git_branch
  ENV['VERSIONNAME'] ||= get_version_name().tr(",","")
  ENV['VERSIONCODE'] ||= get_version_code().tr(",","")
  ENV['CHANGELOG'] = read_changelog(
    changelog_path: './CHANGELOG.md',
    section_identifier: '[Unreleased]',
    excluded_markdown_elements: ['-', '###']
  )
  slack(
    message: "Hi! @channel \r\n A new build start",
    default_payloads: [:git_branch, :lane, :git_author]
  )
  # send_e_mail(
  #   stmp_server: "smtp.exmail.qq.com",
  #   user_name: "update@hellotalk.com",
  #   password: "Hello123",
  #   subject: "Android CI - START - #{ENV['GIT_BRANCH']}",
  #   message_body: "Hi! @issenn, A new build start",
  #   recipients: "issenn@hellotalk.com,update@hellotalk.com,zhangfeng@hellotalk.com,huangzefeng@hellotalk.com,carl@hellotalk.com"
  #   # recipients: ENV['SEND_E_MAIL_RECIPIENTS'].split(',')
  # )
  gradle(
    task: "-v"
  )
  gradle(
    task: "clean"
  )
end

before_each do |lane, options|
  # ...
end

lane :test_email do
  send_e_mail(
    stmp_server: "smtp.exmail.qq.com",
    user_name: "update@hellotalk.com",
    password: "Hello123",
    subject: "Android CI - START - #{ENV['GIT_BRANCH']}",
    message_body: "Hi! @issenn, A new build start",
    recipients: "archon@hellotalk.com,update@hellotalk.com,zhangfeng@hellotalk.com,huangzefeng@hellotalk.com,carl@hellotalk.com".split(',')  
  )
end

desc "Submit a new Release Build to all"
lane :do_publish_all do |options|
  do_publish_china
  do_publish_google
end

desc "Submit a new Release Build to China"
lane :do_publish_china do |options|
  gradle(
    task: "assemble",
    flavor: "China",
    build_type: "Release",
    print_command_output: true
  )
  do_upload_firim
end

desc "Submit a new Release Build to Google"
lane :do_publish_google do |options|
  gradle(
    task: "assemble",
    flavor: "Google",
    build_type: "Release",
    print_command_output: true
  )
  do_upload_firim
end

$upload_retry=0

lane :do_upload_firim do
  puts lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
  puts lane_context[SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS]
  puts lane_context[SharedValues::GRADLE_FLAVOR]
  puts lane_context[SharedValues::GRADLE_BUILD_TYPE]
  puts get_version_name().tr(",","")
  puts get_version_code().tr(",","")
  begin
    flavor = lane_context[SharedValues::GRADLE_FLAVOR] || /([^\/-]*)(?=-[^\/-]*\.apk$)/.match(apk)
    slack(
      message: "Hi! @issenn \r\n A new app uploading \r\nFlavor: #{flavor}",
      default_payloads: [:git_branch, :lane, :git_author]
    )
    change_log = "[#{flavor}]+[#{ENV['GIT_BRANCH']}]\r\n---\r\n" + ENV['CHANGELOG']
    firim(
      apk: lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH],
      app_version: get_version_name().tr(",",""),
      app_build_version: get_version_code().tr(",",""),
      app_changelog: change_log
    )
    slack(
      message: "Hi! @issenn \r\n A new app upload success \r\nFlavor: #{flavor} \r\n#{ENV['CHANGELOG']}",
      success: true,
      default_payloads: [:git_branch, :lane, :git_author, :test_result]
    )
    # send_e_mail(
    #   stmp_server: "smtp.exmail.qq.com",
    #   user_name: "update@hellotalk.com",
    #   password: "Hello123",
    #   subject: "Android CI - End - #{ENV['GIT_BRANCH']}",
    #   message_body: "Hi! @issenn \r\n A new app upload success \r\nFlavor: #{flavor} \r\n#{ENV['CHANGELOG']}"
    # )
    $upload_retry=0
  rescue => ex
    $upload_retry += 1
    if $upload_retry < 3
      do_upload_firim
    else
      slack(
        message: "Hi! @issenn \r\n A new app upload failed \r\nFlavor: #{flavor}",
        success: false,
        default_payloads: [:git_branch, :lane, :git_author, :test_result]
      )
      # raise ex
      puts ex
    end
  end
end

after_each do |lane, options|
  # ...
end

after_all do |lane, options|
  slack(
    message: "Hi! @channel \r\n A new build end",
    default_payloads: [:git_branch, :lane, :git_author]
  )
end

error do |lane, exception, options|
  if options[:debug]
    puts "Hi :)"
  end
  UI.message(exception.message)
end
