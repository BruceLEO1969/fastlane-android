# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

before_all do |lane, options|
  ENV["GIT_BRANCH"] = git_branch
  ENV['VERSIONNAME'] ||= get_version_name().tr(",","")
  ENV['VERSIONCODE'] ||= get_version_code().tr(",","")
  ENV['CHANGELOG'] = read_changelog(
    changelog_path: './CHANGELOG.md',
    section_identifier: '[Unreleased]',
    excluded_markdown_elements: ['-', '###']
  )
  ENV['PHONE'] = read_changelog(
  changelog_path: './CHANGELOG.md',
  section_identifier: '[Phone]',
  excluded_markdown_elements: ['-', '###']
  )
  slack(
    message: "Hi! @channel \r\n A new build start \r\n#{ENV['PHONE']}",
    default_payloads: [:git_branch, :lane, :git_author]
  )

  ENV['Android_GROUP'] = 'https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=e87d05fe-5255-4629-b448-5270f497cba2'

  wechatwork(
    webhook: ENV['Android_GROUP'],
    markdown: "**#{ENV['VERSIONNAME']} (#{ENV['VERSIONCODE']}) BUILD START** \r\n\n  #{ENV['CHANGELOG']}",
    mentioned_mobile_list: ["#{ENV['PHONE']}"]
  )

  gradle(
    task: "-v"
  )
  gradle(
    task: "clean"
  )
end

before_each do |lane, options|
  # ...
end

desc "Submit a new Release Build to all"
lane :do_publish_all do |options|
  do_publish_china
  do_publish_google
end

desc "Submit a new Release Build to China"
lane :do_publish_china do |options|
  gradle(
    task: "assemble",
    flavor: "China",
    build_type: "Release",
    print_command_output: false
  )
  do_upload_firim
end

desc "Submit a new Release Build to Google"
lane :do_publish_google do |options|
  gradle(
    task: "assemble",
    flavor: "Google",
    build_type: "Release",
    print_command_output: false
  )
  do_upload_firim
end

$upload_retry=0

lane :do_upload_firim do
  puts lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
  puts lane_context[SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS]
  puts lane_context[SharedValues::GRADLE_FLAVOR]
  puts lane_context[SharedValues::GRADLE_BUILD_TYPE]
  puts get_version_name().tr(",","")
  puts get_version_code().tr(",","")
  begin
    flavor = lane_context[SharedValues::GRADLE_FLAVOR] || /([^\/-]*)(?=-[^\/-]*\.apk$)/.match(apk)
    slack(
      message: "Hi! @archon \r\n A new app uploading \r\nFlavor: #{flavor}",
      default_payloads: [:git_branch, :lane, :git_author]
    )
    wechatwork(
      webhook: ENV['Android_GROUP'],
      markdown: "A new app uploading. \r\nFlavor: #{flavor}",
      mentioned_mobile_list: []
    )
    change_log = "[#{flavor}]+[#{ENV['GIT_BRANCH']}]\r\n---\r\n" + ENV['CHANGELOG']
    firim(
      apk: lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH],
      app_version: get_version_name().tr(",",""),
      app_build_version: get_version_code().tr(",",""),
      app_changelog: change_log
    )
    slack(
      message: "Hi! @archon \r\n A new app upload success \r\nFlavor: #{flavor} \r\n#{ENV['CHANGELOG']}",
      success: true,
      default_payloads: [:git_branch, :lane, :git_author, :test_result]
    )
    wechatwork(
      webhook: ENV['Android_GROUP'],
      message: "A new app upload <font color=\"info\">success</font>. \r\nFlavor: #{flavor}",
      mentioned_mobile_list: []
    )

    $upload_retry=0
  rescue => ex
    $upload_retry += 1
    if $upload_retry < 3
      do_upload_firim
    else
      slack(
        message: "Hi! @archon \r\n A new app upload failed \r\nFlavor: #{flavor}",
        success: false,
        default_payloads: [:git_branch, :lane, :git_author, :test_result]
      )
      wechatwork(
        webhook: ENV['Android_GROUP'],
        message: "A new app upload <font color=\"warning\">failed</font>. \r\nFlavor: #{flavor}",
        mentioned_mobile_list: []
      )
      # raise ex
      puts ex
    end
  end
end

after_each do |lane, options|
  # ...
end

after_all do |lane, options|
  slack(
    message: "Hi! @channel \r\n A new build end",
    default_payloads: [:git_branch, :lane, :git_author]
  )
  wechatwork(
    webhook: ENV['Android_GROUP'],
    message: "A new build ended.",
    mentioned_mobile_list: []
  )
end

error do |lane, exception, options|
  if options[:debug]
    puts "Hi :)"
  end
  UI.message(exception.message)
end
