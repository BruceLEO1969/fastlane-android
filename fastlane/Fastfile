# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

before_all do |lane, options|
  ENV["GIT_BRANCH"] = git_branch
  ENV['VERSIONNAME'] ||= get_version_name().tr(",","")
  ENV['VERSIONCODE'] ||= get_version_code().tr(",","")
  ENV['CHANGELOG'] = read_changelog(
    changelog_path: './CHANGELOG.md',
    section_identifier: '[Unreleased]',
    excluded_markdown_elements: ['-', '###']
  )
  ENV['PHONE'] = read_changelog(
    changelog_path: './CHANGELOG.md',
    section_identifier: '[Phone]',
    excluded_markdown_elements: ['-', '###']
  )

  ENV['Android_Dev'] = 'https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=e87d05fe-5255-4629-b448-5270f497cba2'
  ENV['Android_ALL'] = 'https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=59122387-2ec3-4cad-932e-0979efa71f89'

  phone_list = "18779144521,18126009603"
  ENV['PHONE'] = phone_list + "," + ENV['PHONE']

  #slack(
  #  message: "Hi! @channel \r\n A new build start",
  #  default_payloads: [:git_branch, :lane, :git_author]
  #)

  wechatwork(
    webhook: ENV['Android_Dev'],
    markdown: "**#{ENV['VERSIONNAME']} (#{ENV['VERSIONCODE']}) BUILD START** \r\n\n  #{ENV['CHANGELOG']}",
    mentioned_mobile_list: []
  )

  #gradle(
  #  task: "-v"
  #)
  #gradle(
  #  task: "clean"
  #)
end


before_each do |lane, options|
  # ...
end

desc "wechatwork notification send to all whel all step success."
lane :do_wechat_all do |options|
  wechatwork(
    webhook: ENV['Android_ALL'],
    markdown: "**Android #{ENV['VERSIONNAME']} (#{ENV['VERSIONCODE']})** \r\n\n  #{ENV['CHANGELOG']}",
    mentioned_mobile_list: ENV['PHONE']
  )
end

desc "Submit a new Release Build to all"
lane :do_publish_all do |options|
  do_publish_china
  do_publish_google
  do_wechat_all
  #slack(
  #  message: "All upload success. \r\n#{ENV['CHANGELOG']}",
  #  success: true,
  #  default_payloads: [:git_branch, :lane, :git_author, :test_result]
  #  )
end

desc "Compile China flavor."
lane :do_compile_china do |options|
  begin
    gradle(
      task: "-v ",
      flavor: "China",
      build_type: "Release",
      print_command_output: false
      )
    #slack(
    #  message: "Gradle task for China success.",
    #  success: true,
    #  default_payloads: []
    #  )
    wechatwork(
      webhook: ENV['Android_Dev'],
      markdown: "Gradle task for China <font color=\"info\">success</font>.",
      mentioned_mobile_list: []
      )
  rescue => e
    #slack(
    #  message: "Gradle task for China failed.",
    #  success: true,
    #  default_payloads: []
    #  )
    wechatwork(
      webhook: ENV['Android_Dev'],
      markdown: "Gradle task for China <font color=\"warning\">failed</font>.",
      mentioned_mobile_list: []
      )
    puts e
    UI.error e
    UI.user_error!("Whoops, something went wrong")
  end
end

desc "Compile Google flavor."
lane :do_compile_google do |options|
  begin
    gradle(
      task: "-v ",
      flavor: "Google",
      build_type: "Release",
      print_command_output: false
      )
    #slack(
    #  message: "Gradle task for Google success.",
    #  success: true,
    #  default_payloads: []
    #  )
    wechatwork(
      webhook: ENV['Android_Dev'],
      markdown: "Gradle task for Google <font color=\"info\">success</font>.",
      mentioned_mobile_list: []
      )
  rescue Exception => e
    #slack(
    #  message: "Gradle task for Google failed.",
    #  success: true,
    #  default_payloads: []
    #  )
    wechatwork(
      webhook: ENV['Android_Dev'],
      markdown: "Gradle task for Google <font color=\"warning\">failed</font>.",
      mentioned_mobile_list: []
      )
    puts e
    UI.error e
    UI.user_error!("Whoops, something went wrong")
  end
end

desc "Submit a new Release Build to China"
lane :do_publish_china do |options|
  #gradle(
  #  task: "assemble",
  #  flavor: "China",
  #  build_type: "Release",
  #  print_command_output: false
  #  )
  do_compile_china
  do_upload_firim
end

desc "Submit a new Release Build to Google"
lane :do_publish_google do |options|
  #gradle(
  #  task: "assemble",
  #  flavor: "Google",
  #  build_type: "Release",
  #  print_command_output: false
  #)
  do_compile_google
  do_upload_firim
end

$upload_retry=0

lane :do_upload_firim do
  puts lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
  puts lane_context[SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS]
  puts lane_context[SharedValues::GRADLE_FLAVOR]
  puts lane_context[SharedValues::GRADLE_BUILD_TYPE]
  puts get_version_name().tr(",","")
  puts get_version_code().tr(",","")
  begin
    flavor = lane_context[SharedValues::GRADLE_FLAVOR] || /([^\/-]*)(?=-[^\/-]*\.apk$)/.match(apk)
    if flavor == "China"
      lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH] = "/Users/mac/Library/Jenkins-slave1/workspace/test_dev/HelloTalk/build/outputs/apk/china/release/HelloTalk-china-release.apk"
    elsif flavor == "Google"
      lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH] = "/Users/mac/Library/Jenkins-slave1/workspace/test_dev/HelloTalk/build/outputs/apk/google/release/HelloTalk-google-release.apk"
    else
      UI.user_error!("No flavor defined.")      
    end

    puts lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    wechatwork(
      webhook: ENV['Android_Dev'],
      markdown: "A new app uploading. \r\nFlavor: #{flavor}",
      mentioned_mobile_list: []
    )
    change_log = "[#{flavor}]+[#{ENV['GIT_BRANCH']}]\r\n---\r\n" + ENV['CHANGELOG']
    firim(
      apk: lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH],
      app_version: get_version_name().tr(",",""),
      app_build_version: get_version_code().tr(",",""),
      app_changelog: change_log
    )
    #slack(
    #  message: "Hi! @archon \r\n A new app upload success \r\nFlavor: #{flavor} \r\n#{ENV['CHANGELOG']}",
    #  success: true,
    #  default_payloads: [:git_branch, :lane, :git_author, :test_result]
    #)
    wechatwork(
      webhook: ENV['Android_Dev'],
      markdown: "Upload <font color=\"info\">success</font>. \r\nFlavor: #{flavor}",
      mentioned_mobile_list: []
    )

    $upload_retry=0
  rescue => ex
    $upload_retry += 1
    if $upload_retry < 3
      do_upload_firim
    else
      #slack(
      #  message: "Hi! @archon \r\n A new app upload failed \r\nFlavor: #{flavor}",
      #  success: false,
      #  default_payloads: [:git_branch, :lane, :git_author, :test_result]
      #)
      wechatwork(
        webhook: ENV['Android_Dev'],
        markdown: "Upload <font color=\"warning\">failed</font>. \r\nFlavor: #{flavor}",
        mentioned_mobile_list: []
      )

      # raise ex
      UI.error e
      UI.user_error!("Whoops, something went wrong")
      puts ex
    end
  end
end

after_each do |lane, options|
  # ...
end

after_all do |lane, options|
  #slack(
  #  message: "Hi! @channel \r\n A new build end",
  #  default_payloads: [:git_branch, :lane, :git_author]
  #)
  wechatwork(
    webhook: ENV['Android_Dev'],
    markdown: "**Android #{ENV['VERSIONNAME']} (#{ENV['VERSIONCODE']}) BUILD Ended**",
    mentioned_mobile_list: []
  )
end

error do |lane, exception, options|
  if options[:debug]
    puts "Hi :)"
  end
  UI.message(exception.message)
end
